using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Xml;

namespace Tool
{
    public partial class scsim : Form
    {
        private int SelBes;
        private int SelRei;
        private int SelArb;

        private DataTable dataTableBes;
        private DataTable dataTableArb;
        private DataTable dataTableRei;

        private bool achtung = false;

        private void scsim_Load(object sender, EventArgs e)
        {
            //TODO: .ini Laden für die Puffer werte

            gbDatenSichern.Visible = false;
            pbStartSichern.Visible = false;
            pbReihenfolgeSichern.Visible = false;
            pbArbeitsplaetzeSichern.Visible = false;
            pbBestellungSichern.Visible = false;
            pbPufferSichern.Visible = false;
            pbWarnung.Visible = false;




            XmlTextReader reader = new XmlTextReader(Application.StartupPath + "//puffer.xml");

            while (reader.Read())
            {
                if (reader.IsStartElement("Pufferwert"))
                {
                    int nr = Convert.ToInt32(reader.GetAttribute("name"));
                    int val = Convert.ToInt32(reader.ReadString());
                    DataContainer.Instance.GetTeil(nr).Pufferwert = val;

                    switch (nr)
                    {
                        case 1:
                            upDown1.Value = val;
                            break;
                        case 2:
                            upDown2.Value = val;
                            break;
                        case 3:
                            upDown3.Value = val;
                            break;
                        case 4:
                            upDown4.Value = val;
                            break;
                        case 5:
                            upDown5.Value = val;
                            break;
                        case 6:
                            upDown6.Value = val;
                            break;
                        case 7:
                            upDown7.Value = val;
                            break;
                        case 8:
                            upDown8.Value = val;
                            break;
                        case 9:
                            upDown9.Value = val;
                            break;
                        case 10:
                            upDown10.Value = val;
                            break;
                        case 11:
                            upDown11.Value = val;
                            break;
                        case 12:
                            upDown12.Value = val;
                            break;
                        case 13:
                            upDown13.Value = val;
                            break;
                        case 14:
                            upDown14.Value = val;
                            break;
                        case 15:
                            upDown15.Value = val;
                            break;
                        case 16:
                            upDown16.Value = val;
                            break;
                        case 17:
                            upDown17.Value = val;
                            break;
                        case 18:
                            upDown18.Value = val;
                            break;
                        case 19:
                            upDown19.Value = val;
                            break;
                        case 20:
                            upDown20.Value = val;
                            break;
                        case 26:
                            upDown26.Value = val;
                            break;
                        case 29:
                            upDown29.Value = val;
                            break;
                        case 30:
                            upDown30.Value = val;
                            break;
                        case 31:
                            upDown31.Value = val;
                            break;
                        case 49:
                            upDown49.Value = val;
                            break;
                        case 50:
                            upDown50.Value = val;
                            break;
                        case 54:
                            upDown54.Value = val;
                            break;
                        case 55:
                            upDown55.Value = val;
                            break;
                        case 56:
                            upDown56.Value = val;
                            break;
                    }
                }
            }

        }

        public scsim()
        {
            InitializeComponent();
        }

       
        #region Export
        private void pbSuchenExport_Click(object sender, EventArgs e)
        {
            FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog();
            folderBrowserDialog.ShowDialog();
            string o = folderBrowserDialog.SelectedPath;
            tbExport.Text = o;
        }

        private void pbSichernExport_Click(object sender, EventArgs e)
        {
            DataContainer dc = DataContainer.Instance;
            dc.SaveFile = tbExport.Text;
        }
        #endregion

        #region Start

        private void pbBrechnungStarten_Click(object sender, EventArgs e)
        {
            DataContainer dc = DataContainer.Instance;
            if (dc.ETeilList.Count == 0)
            {
                XML.ReadFile();
                this.tbImport.ReadOnly = true;
            }
            else
            {
                dc.Reset();
            }
            this.btWerteSichern_Click();
            dc.Optimieren();
            dc = DataContainer.Instance;

        //    if (dc.DataTableKaufteil.Rows.Count == 0 && dc.DataTableProduktion.Rows.Count == 0)
            {
                gbDatenSichern.Visible = true;
                

                dgvBestellung.ReadOnly = true;
                dgvProduktionspalung.ReadOnly = true;
                dgvArbeitsplatz.ReadOnly = true;

                dgvBestellung.DataSource =  dc.DataTableKaufteil;
                dgvProduktionspalung.DataSource = dc.DataTableProduktion;
                dgvArbeitsplatz.DataSource = dc.DataTableArbeitsPlatz;

                dataTableBes = dc.DataTableKaufteil;
                dataTableRei = dc.DataTableProduktion;
                dataTableArb = dc.DataTableArbeitsPlatz;

            }
        }

        [STAThread]
        private void pbSuchen_Click(object sender, EventArgs e)
        {
            OpenFileDialog open = new OpenFileDialog();
            open.ShowDialog();
            string o = open.FileName;
            tbImport.Text = o;


            DataContainer dc = DataContainer.Instance;
            dc.OpenFile = open.FileName;
        }

        private void btWerteZurueckSetzen_Click(object sender, EventArgs e)
        {
            ddAktP1.Value = 0;
            ddAktP2.Value = 0;
            ddAktP3.Value = 0;
            
            ddZ1P1.Value = 0;
            ddZ1P2.Value = 0;
            ddZ1P3.Value = 0;

            ddZ2P1.Value = 0;
            ddZ2P2.Value = 0;
            ddZ2P3.Value = 0;

            cbUeberstunden.Checked = true;
        }
        
        private void btWerteSichern_Click()
        {
            pbStartSichern.Visible = true;

            //if (ddZ1P1 == 0 && ddZ1P2 == 0 && ddZ1P3 == 0)
            //{
            //    lblStatrStatus.Text = "Die Werte für Aktuelle Periode+1 sind nicht gesetzt \n Berechnung kann nicht Durchgeführt werden";
            //    lblZ1P1.ForeColor = "red";
            //    lblZ1P2.ForeColor = "red";
            //    lblZ1P3.ForeColor = "red";
            //}
            //if (ddZ2P1 == 0 && ddZ2P2 == 0 && ddZ2P3 == 0)
            //{
            //    lblStatrStatus.Text = "Die Werte für Aktuelle Periode+2 sind nicht gesetzt \n Berechnung kann nicht Durchgeführt werden";
            //    lblZ2P1.ForeColor = "red";
            //    lblZ2P2.ForeColor = "red";
            //    lblZ2P3.ForeColor = "red";
            //}
            //if (ddZ1P1 == 0 && ddZ1P2 == 0 && ddZ1P3 == 0 && ddZ2P1 == 0 && ddZ2P2 == 0 && ddZ2P3 == 0)
            //{
            //    lblStatrStatus.Text = "Die Werte für Aktuelle Periode+1 und Periode+1 sind nicht gesetzt \n Berechnung kann nicht Durchgeführt werden";
            //    lblZ1P1.ForeColor = "red";
            //    lblZ1P2.ForeColor = "red";
            //    lblZ1P3.ForeColor = "red";
            //    lblZ2P1.ForeColor = "red";
            //    lblZ2P2.ForeColor = "red";
            //    lblZ2P3.ForeColor = "red";
            //}
            //if(ddZ1P1 == 0)
            //{
            //     lblZ1P1.ForeColor = "red";       
            //}
            //if(ddZ1P2 == 0)
            //{
            //     lblZ1P2.ForeColor = "red";       
            //}
            //if(ddZ1P3 == 0)
            //{
            //     lblZ1P3.ForeColor = "red";       
            //}
            // if(ddZ2P1 == 0)
            //{
            //     lblZ2P1.ForeColor = "red";       
            //}
            //if(ddZ2P2 == 0)
            //{
            //     lblZ2P2.ForeColor = "red";       
            //}
            //if(ddZ2P3 == 0)
            //{
            //     lblZ2P3.ForeColor = "red";       
            //}

            //elseif(ddZ1P1 != 0 && ddZ1P2 != 0 && ddZ1P3 != 0 && ddZ2P1 != 0 && ddZ2P2 != 0 && ddZ2P3 != 0)
            //{
                DataContainer dc = DataContainer.Instance;

                if (cbUeberstunden.Text == "true")
                {
                    dc.Sonderproduktion = true;
                }
                else
                {
                    dc.Sonderproduktion = false;
                }

                dc.GetTeil(1).VerbrauchAktuel = Convert.ToInt32(ddAktP1.Value);
                dc.GetTeil(1).VerbrauchPrognose1 = Convert.ToInt32(ddZ1P1.Value);
                dc.GetTeil(1).VerbrauchPrognose2 = Convert.ToInt32(ddZ2P1.Value);


                dc.GetTeil(2).VerbrauchAktuel = Convert.ToInt32(ddAktP2.Value);
                dc.GetTeil(2).VerbrauchPrognose1 = Convert.ToInt32(ddZ1P2.Value);
                dc.GetTeil(2).VerbrauchPrognose2 = Convert.ToInt32(ddZ2P2.Value);


                dc.GetTeil(3).VerbrauchAktuel = Convert.ToInt32(ddAktP3.Value);
                dc.GetTeil(3).VerbrauchPrognose1 = Convert.ToInt32(ddZ1P3.Value);
                dc.GetTeil(3).VerbrauchPrognose2 = Convert.ToInt32(ddZ2P3.Value);
                
                
               //}
            }
        #endregion

        #region Reihenfolge

        private void dgvProduktionspalung_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            SelRei = e.RowIndex;
        }

        private void dgvProduktionspalung_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            SelRei = e.RowIndex;
        }

        private void btnReiNeu_Click(object sender, EventArgs e)
        {
            if (achtung == false)
            {
                MessageBox.Show("Falls sie etwas ändern, kann keine Optimale Berechnung Gewähleistet werden.", "ACHTUNG", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                achtung = true;
            }

            NeueBestellungRei neueB = new NeueBestellungRei(ref this.dataTableRei);
            neueB.ShowDialog();
            if (neueB.DialogResult.Equals(DialogResult.OK))
            {
                pbWarnung.Visible = true;
                neuSetzenRei();
            }  
        }

        private void btnReiBea_Click(object sender, EventArgs e)
        {
           // MessageBox.Show("Falls sie etwas ändern, kann keine Optimale Berechnung Gewähleistet werden", MessageBoxIcon.Warning );

            if (achtung == false)
            {
                MessageBox.Show("Falls sie etwas ändern, kann keine Optimale Berechnung Gewähleistet werden.", "ACHTUNG", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                achtung = true;
            }

            BearbeitenRE posRei = new BearbeitenRE(ref this.dataTableRei, ref this.SelRei);
            posRei.ShowDialog();

            if (posRei.DialogResult.Equals(DialogResult.OK))
            {
                pbWarnung.Visible = true;

                dataTableRei.Rows.RemoveAt(SelRei);
                neuSetzenRei();
            }
        }
        private void btnReiLoe_Click(object sender, EventArgs e)
        {
            DialogResult r =DialogResult.OK;
            if (achtung == false)
            {
                r = MessageBox.Show("Falls sie etwas ändern, kann keine Optimale Berechnung Gewähleistet werden.", "ACHTUNG", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                achtung = true;
            }

            if (r.Equals(DialogResult.OK))
            {
                pbWarnung.Visible = true;
                dataTableRei.Rows.RemoveAt(SelRei);
                neuSetzenRei();
                
            }
            
        }

        private void btnReiSich_Click(object sender, EventArgs e)
        {
            pbReihenfolgeSichern.Visible = true;
            DataContainer dc = DataContainer.Instance;
            dc.ReloadDataTableProduktion(dataTableRei);
        }

        private void neuSetzenRei()
        {
            dgvProduktionspalung.DataSource = dataTableRei;
        }

      

        #endregion 

        #region Arbeitsplaetze

        private void dgvArbeitsplatz_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            SelArb = e.RowIndex;
        }

        private void dgvArbeitsplatz_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            SelArb = e.RowIndex;
        }

        private void btnArbNeu_Click(object sender, EventArgs e)
        {
            if (achtung == false)
            {
                MessageBox.Show("Falls sie etwas ändern, kann keine Optimale Berechnung Gewähleistet werden.", "ACHTUNG", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                achtung = true;
            }
            
            NeueArb neueB = new NeueArb(ref this.dataTableBes);
            neueB.ShowDialog();
            if (neueB.DialogResult.Equals(DialogResult.OK))
            {
                pbWarnung.Visible = true;

                neuSetzenArb();
            }
        }

        private void btnArbBea_Click(object sender, EventArgs e)
        {

            if (achtung == false)
            {
                MessageBox.Show("Falls sie etwas ändern, kann keine Optimale Berechnung Gewähleistet werden.", "ACHTUNG", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                achtung = true;
            }

            BearbeitenArb posArb = new BearbeitenArb(ref this.dataTableArb, ref this.SelArb);
            posArb.ShowDialog();

            if (posArb.DialogResult.Equals(DialogResult.OK))
            {
                pbWarnung.Visible = true;

                dataTableArb.Rows.RemoveAt(SelArb);
                neuSetzenArb();
            }
        }

        private void btnArbLoe_Click(object sender, EventArgs e)
        {
            DialogResult r = DialogResult.OK;
            if (achtung == false)
            {
                r = MessageBox.Show("Falls sie etwas ändern, kann keine Optimale Berechnung Gewähleistet werden.", "ACHTUNG", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                achtung = true;
                
            }

            if (r.Equals(DialogResult.OK))
            {
                pbWarnung.Visible = true;
                dataTableArb.Rows.RemoveAt(SelArb);
            }
        }

        private void btnArbSic_Click(object sender, EventArgs e)
        {
            pbArbeitsplaetzeSichern.Visible = true;
            DataContainer dc = DataContainer.Instance;
            dc.ReloadDataTableArbeitsPlatz(dataTableArb); 
        }

        private void neuSetzenArb()
        {
            dgvArbeitsplatz.DataSource = dataTableArb;
        }


        #endregion 

        #region Bestellung

        private void dgvBestellung_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            SelBes = e.RowIndex;
        }

        private void dgvBestellung_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            SelBes = e.RowIndex;
        }

        private void btnNeu_Click(object sender, EventArgs e)
        {
            if (achtung == false)
            {
                MessageBox.Show("Falls sie etwas ändern, kann keine Optimale Berechnung Gewähleistet werden.", "ACHTUNG", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                achtung = true;
                
            }

            NeueBestellung neueB = new NeueBestellung(ref this.dataTableBes);
            neueB.ShowDialog();
            if (neueB.DialogResult.Equals(DialogResult.OK))
            {
                pbWarnung.Visible = true;
                neuSetzenBes();
            }
        }

        private void btnbearbeiten_Click(object sender, EventArgs e)
        {
            if (achtung == false)
            {
                MessageBox.Show("Falls sie etwas ändern, kann keine Optimale Berechnung Gewähleistet werden.", "ACHTUNG", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                achtung = true;

            }

            Bearbeiten posBea = new Bearbeiten(ref this.dataTableBes, ref this.SelBes);
            posBea.ShowDialog();

            if (posBea.DialogResult.Equals(DialogResult.OK))
            {
                dataTableBes.Rows.RemoveAt(SelBes);
                neuSetzenBes();
            }
        }

        private void btnBestellungLoeschen_Click(object sender, EventArgs e)
        {
            DialogResult r = DialogResult.OK;
            if (achtung == false)
            {
                r = MessageBox.Show("Falls sie etwas ändern, kann keine Optimale Berechnung Gewähleistet werden.", "ACHTUNG", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                achtung = true;
            }

            if (r.Equals(DialogResult.OK))
            {
                pbWarnung.Visible = true;
                dataTableBes.Rows.RemoveAt(SelBes);
            }
        }

        private void btnBestellungSichern_Click(object sender, EventArgs e)
        {
            pbBestellungSichern.Visible = true;
            DataContainer dc = DataContainer.Instance;
           // dc.ReloadDataTableKaufteil = dataTableBes;
        }

        private void neuSetzenBes()
        {
            dgvBestellung.DataSource = dataTableBes;
        }

        #endregion

        #region Puffer Werte

            private void btnZuerueksetzenPuffer_Click(object sender, EventArgs e)
        {
            //ETeile
            upDown1.Value = 0;
            upDown2.Value = 0;
            upDown3.Value = 0;
            upDown4.Value = 0;
            upDown5.Value = 0;
            upDown6.Value = 0;
            upDown7.Value = 0;
            upDown8.Value = 0;
            upDown9.Value = 0;
            upDown10.Value = 0;
            upDown11.Value = 0;
            upDown12.Value = 0;
            upDown13.Value = 0;
            upDown14.Value = 0;
            upDown15.Value = 0;
            upDown16.Value = 0;
            upDown17.Value = 0;
            upDown18.Value = 0;
            upDown19.Value = 0;
            upDown20.Value = 0;

            upDown26.Value = 0;
            upDown29.Value = 0;
            upDown30.Value = 0;

            upDown31.Value = 0;
            upDown49.Value = 0;
            upDown50.Value = 0;

            upDown51.Value = 0;
            upDown54.Value = 0;
            upDown55.Value = 0;
            upDown56.Value = 0;

      

        }

        private void btnSichernPuffer_Click(object sender, EventArgs e)
        {
            pbPufferSichern.Visible = true;

            DataContainer dc = DataContainer.Instance;

            dc.SetPuffer(1, Convert.ToInt32(upDown1.Value));
            dc.SetPuffer(2, Convert.ToInt32(upDown2.Value));
            dc.SetPuffer(3, Convert.ToInt32(upDown3.Value));
            dc.SetPuffer(4, Convert.ToInt32(upDown4.Value));
            dc.SetPuffer(5, Convert.ToInt32(upDown5.Value));
            dc.SetPuffer(6, Convert.ToInt32(upDown6.Value));
            dc.SetPuffer(7, Convert.ToInt32(upDown7.Value));
            dc.SetPuffer(8, Convert.ToInt32(upDown8.Value));
            dc.SetPuffer(9, Convert.ToInt32(upDown9.Value));
            dc.SetPuffer(10, Convert.ToInt32(upDown10.Value));
            dc.SetPuffer(11, Convert.ToInt32(upDown11.Value));
            dc.SetPuffer(12, Convert.ToInt32(upDown12.Value));
            dc.SetPuffer(13, Convert.ToInt32(upDown13.Value));
            dc.SetPuffer(14, Convert.ToInt32(upDown14.Value));
            dc.SetPuffer(15, Convert.ToInt32(upDown15.Value));
            dc.SetPuffer(16, Convert.ToInt32(upDown16.Value));
            dc.SetPuffer(17, Convert.ToInt32(upDown17.Value));
            dc.SetPuffer(18, Convert.ToInt32(upDown18.Value));
            dc.SetPuffer(19, Convert.ToInt32(upDown19.Value));
            dc.SetPuffer(20, Convert.ToInt32(upDown20.Value));

            dc.SetPuffer(26, Convert.ToInt32(upDown26.Value));
            dc.SetPuffer(29, Convert.ToInt32(upDown29.Value));
            dc.SetPuffer(30, Convert.ToInt32(upDown30.Value));

            dc.SetPuffer(31, Convert.ToInt32(upDown31.Value));
            dc.SetPuffer(49, Convert.ToInt32(upDown49.Value));
            dc.SetPuffer(50, Convert.ToInt32(upDown50.Value));

            
            dc.SetPuffer(54, Convert.ToInt32(upDown54.Value));
            dc.SetPuffer(55, Convert.ToInt32(upDown55.Value));
            dc.SetPuffer(56, Convert.ToInt32(upDown56.Value));


           

            XmlTextWriter myXmlTextWriter = new XmlTextWriter("puffer.xml", System.Text.Encoding.UTF8);
            myXmlTextWriter.Formatting = Formatting.Indented;
            myXmlTextWriter.WriteStartDocument(false);

            myXmlTextWriter.WriteComment("Von mir");

            myXmlTextWriter.WriteStartElement("Puffer ");

            myXmlTextWriter.WriteStartElement("Puffer ETeile");

            myXmlTextWriter.WriteElementString("1", Convert.ToString(upDown1.Value));
            myXmlTextWriter.WriteElementString("2", Convert.ToString(upDown2.Value));
            myXmlTextWriter.WriteElementString("2", Convert.ToString(upDown3.Value));

            myXmlTextWriter.WriteEndElement();

            myXmlTextWriter.WriteStartElement("Puffer KTeile");

            

            myXmlTextWriter.WriteEndElement();
            myXmlTextWriter.WriteEndElement();


            myXmlTextWriter.Flush();
            myXmlTextWriter.Close();
        }
            #endregion

        #region Nicht Verwendet



        private void tabExport_Click(object sender, EventArgs e)
        {

        }

        private void tabStart_Click(object sender, EventArgs e)
        {

        }

        private void upDown21_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown39_ValueChanged(object sender, EventArgs e)
        {

        }
        
        private void lblAP3_Click(object sender, EventArgs e)
        {

        }

        private void upDown38_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown37_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown36_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown35_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown34_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown33_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown32_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown28_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown27_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown25_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown24_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown23_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown22_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown40_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown41_ValueChanged(object sender, EventArgs e)
        {

        }

        private void upDown42_ValueChanged(object sender, EventArgs e)
        {

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void button6_Click(object sender, EventArgs e)
        {

        }

        private void button7_Click(object sender, EventArgs e)
        {

        }

        private void button8_Click(object sender, EventArgs e)
        {

        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void button5_Click(object sender, EventArgs e)
        {

        }
        private void tabUnterProdArbeit_Click(object sender, EventArgs e)
        {

        }
        private void button1_Click(object sender, EventArgs e)
        {

        }

       
#endregion 

        private void pictureBox2_Click(object sender, EventArgs e)
        {

        }

        private void tabProdUnterRei_Click(object sender, EventArgs e)
        {
            pbStartSichern.Visible = false;
            pbReihenfolgeSichern.Visible = false;
            pbArbeitsplaetzeSichern.Visible = false;
            pbBestellungSichern.Visible = false;
            pbPufferSichern.Visible = false;
        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

        private void pbXMLSichern_Click(object sender, EventArgs e)
        {
            XML.WriteInput();
        }
    
    }
}